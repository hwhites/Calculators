---
// src/pages/utility/time-card-calculator.astro
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Time Card Calculator with Pay | CourseAssist">
  <div class="max-w-4xl mx-auto">
    <!-- Page Header -->
    <div class="text-center mb-12">
      <h1 class="text-4xl font-bold text-gray-800">Time Card Calculator</h1>
      <p class="mt-2 text-lg text-gray-600">Calculate total work hours and estimate pay, including overtime. Your data is saved automatically.</p>
    </div>

    <!-- Calculator Card -->
    <div class="bg-white p-8 rounded-xl border border-gray-200 shadow-md">
      
      <!-- Pay Rate Inputs -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
        <div>
          <label for="hourlyRate" class="block text-sm font-medium text-gray-700">Hourly Rate ($)</label>
          <input type="number" id="hourlyRate" class="calc-input mt-1 w-full p-2 border border-gray-300 rounded-lg" placeholder="e.g., 20">
        </div>
        <div>
          <label for="overtimeThreshold" class="block text-sm font-medium text-gray-700">Overtime after (hrs)</label>
          <input type="number" id="overtimeThreshold" class="calc-input mt-1 w-full p-2 border border-gray-300 rounded-lg" value="40">
        </div>
        <div>
          <label for="overtimeRate" class="block text-sm font-medium text-gray-700">Overtime Rate (x)</label>
          <input type="number" id="overtimeRate" class="calc-input mt-1 w-full p-2 border border-gray-300 rounded-lg" value="1.5">
        </div>
      </div>

      <!-- Time Entry Rows -->
      <div id="time-rows-container" class="space-y-2">
        <!-- Header -->
        <div class="hidden md:grid grid-cols-12 gap-2 items-center text-sm font-bold text-gray-600 px-2">
          <span class="col-span-2">Day</span>
          <span class="col-span-3">Start Time</span>
          <span class="col-span-3">End Time</span>
          <span class="col-span-2">Break (mins)</span>
          <span class="col-span-2 text-right">Hours</span>
        </div>
        <!-- Rows will be generated by JS -->
      </div>

      <!-- Action Buttons -->
      <div class="mt-4 flex gap-4">
        <button id="addRowBtn" class="w-full text-center py-2 px-4 rounded-lg bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold transition-colors">
          + Add Day
        </button>
        <button id="clearBtn" class="w-full text-center py-2 px-4 rounded-lg bg-red-100 hover:bg-red-200 text-red-700 font-semibold transition-colors">
          Clear All
        </button>
      </div>

      <!-- Results Display -->
      <div class="mt-8 border-t border-gray-200 pt-6">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
            <div class="bg-gray-50 p-4 rounded-lg">
                <p class="text-sm text-gray-600">Total Hours</p>
                <p id="totalHours" class="text-3xl font-extrabold text-blue-600">0.00</p>
            </div>
            <div class="bg-gray-50 p-4 rounded-lg">
                <p class="text-sm text-gray-600">Overtime Hours</p>
                <p id="overtimeHours" class="text-3xl font-extrabold text-blue-600">0.00</p>
            </div>
            <div class="bg-gray-50 p-4 rounded-lg">
                <p class="text-sm text-gray-600">Total Pay</p>
                <p id="totalPay" class="text-3xl font-extrabold text-blue-600">$0.00</p>
            </div>
        </div>
      </div>
    </div>
  </div>

  <template id="time-row-template">
    <div class="time-row grid grid-cols-12 gap-2 items-center p-2 rounded-lg hover:bg-gray-50">
      <span class="col-span-12 md:col-span-2 font-medium day-label">Day 1</span>
      <div class="col-span-6 md:col-span-3"><input type="time" class="calc-input w-full p-2 border border-gray-300 rounded-lg"></div>
      <div class="col-span-6 md:col-span-3"><input type="time" class="calc-input w-full p-2 border border-gray-300 rounded-lg"></div>
      <div class="col-span-12 md:col-span-2"><input type="number" class="calc-input w-full p-2 border border-gray-300 rounded-lg" placeholder="0" value="0"></div>
      <div class="col-span-12 md:col-span-2 text-right"><span class="row-total font-bold text-gray-700">0.00</span></div>
    </div>
  </template>

  <script>
    const container = document.getElementById('time-rows-container');
    const template = document.getElementById('time-row-template');
    const addRowBtn = document.getElementById('addRowBtn');
    const clearBtn = document.getElementById('clearBtn');
    
    // Result Displays
    const totalHoursDisplay = document.getElementById('totalHours');
    const overtimeHoursDisplay = document.getElementById('overtimeHours');
    const totalPayDisplay = document.getElementById('totalPay');

    // Pay Inputs
    const payInputs = ['hourlyRate', 'overtimeThreshold', 'overtimeRate'].map(id => document.getElementById(id));
    
    let dayCounter = 0;

    // --- State Management (LocalStorage) ---
    function saveState() {
        const state = {
            pay: {
                rate: payInputs[0].value,
                otThreshold: payInputs[1].value,
                otRate: payInputs[2].value
            },
            rows: []
        };
        document.querySelectorAll('.time-row').forEach(row => {
            const inputs = row.querySelectorAll('input');
            state.rows.push({
                start: inputs[0].value,
                end: inputs[1].value,
                break: inputs[2].value
            });
        });
        localStorage.setItem('timeCardState', JSON.stringify(state));
    }

    function loadState() {
        const savedState = localStorage.getItem('timeCardState');
        if (!savedState) {
            // Add 5 rows by default if no saved state
            for(let i = 0; i < 5; i++) addRow();
            return;
        }

        const state = JSON.parse(savedState);
        payInputs[0].value = state.pay.rate || '';
        payInputs[1].value = state.pay.otThreshold || '40';
        payInputs[2].value = state.pay.otRate || '1.5';
        
        state.rows.forEach(rowData => addRow(rowData));
        calculateAll();
    }

    // --- Core Functions ---
    function addRow(data = { start: '', end: '', break: '0' }) {
      dayCounter++;
      const clone = template.content.cloneNode(true);
      clone.querySelector('.day-label').textContent = `Day ${dayCounter}`;
      const inputs = clone.querySelectorAll('input');
      inputs[0].value = data.start;
      inputs[1].value = data.end;
      inputs[2].value = data.break;

      inputs.forEach(input => input.addEventListener('input', () => {
        calculateAll();
        saveState();
      }));
      container.appendChild(clone);
    }

    function calculateAll() {
      let grandTotalHours = 0;
      document.querySelectorAll('.time-row').forEach(row => {
        const inputs = row.querySelectorAll('input');
        const startTime = inputs[0].value, endTime = inputs[1].value;
        const breakMins = parseFloat(inputs[2].value) || 0;
        let rowHours = 0;

        if (startTime && endTime) {
          const start = new Date(`1970-01-01T${startTime}`);
          const end = new Date(`1970-01-01T${endTime}`);
          let diffMillis = end - start;
          if (diffMillis < 0) diffMillis += 24 * 60 * 60 * 1000;
          
          const diffHours = diffMillis / (1000 * 60 * 60);
          const breakHours = breakMins / 60;
          rowHours = Math.max(0, diffHours - breakHours);
        }
        
        row.querySelector('.row-total').textContent = rowHours.toFixed(2);
        grandTotalHours += rowHours;
      });

      // Pay Calculation
      const hourlyRate = parseFloat(payInputs[0].value) || 0;
      const otThreshold = parseFloat(payInputs[1].value) || 40;
      const otRateMultiplier = parseFloat(payInputs[2].value) || 1.5;

      const regularHours = Math.min(grandTotalHours, otThreshold);
      const overtimeHours = Math.max(0, grandTotalHours - otThreshold);
      
      const regularPay = regularHours * hourlyRate;
      const overtimePay = overtimeHours * hourlyRate * otRateMultiplier;
      const totalPay = regularPay + overtimePay;

      // Update Displays
      totalHoursDisplay.textContent = grandTotalHours.toFixed(2);
      overtimeHoursDisplay.textContent = overtimeHours.toFixed(2);
      totalPayDisplay.textContent = `$${totalPay.toFixed(2)}`;
    }
    
    function clearAll() {
        if (confirm("Are you sure you want to clear all data? This cannot be undone.")) {
            localStorage.removeItem('timeCardState');
            container.innerHTML = '';
            dayCounter = 0;
            payInputs.forEach(input => input.value = '');
            payInputs[1].value = '40'; // Reset OT threshold
            payInputs[2].value = '1.5';  // Reset OT rate
            for(let i = 0; i < 5; i++) addRow();
            calculateAll();
        }
    }

    // --- Initial Setup ---
    document.addEventListener('DOMContentLoaded', loadState);
    addRowBtn.addEventListener('click', () => addRow());
    clearBtn.addEventListener('click', clearAll);
    payInputs.forEach(input => input.addEventListener('input', () => {
        calculateAll();
        saveState();
    }));
  </script>
</Layout>
